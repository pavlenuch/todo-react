{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/todo-list-item/index.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/item-status-filter/index.js","components/item-status-filter/item-status-filter.js","components/add-item/add-item.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","toDo","done","className","SearchPanel","state","term","onSearchChange","e","target","value","setState","props","type","placeholder","onChange","this","Component","TodoListItem","label","onDeleted","onToggleImportant","onToggleDone","classNames","important","onClick","TodoList","todos","elements","map","item","id","itemProps","display","key","ItemStatusFilter","buttons","name","filter","onFilterChange","clazz","AddItem","onLabelChange","console","log","onSubmit","preventDefault","onItemAdded","App","maxId","todoData","createTodoItem","deleteItem","idx","findIndex","el","slice","addItem","text","newItem","toggleProperty","getElementForSort","bool","getSortElements","arr","boolIf","boolElse","sortDone","sortActive","sortAll","search","items","length","toLowerCase","indexOf","propName","oldItem","visibleItems","doneCount","todoCount","searchItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.579691ea.chunk.js","sourcesContent":["import AppHeader from './app-header';\r\nexport default AppHeader;","import React from 'react';\r\nimport './app-header.css';\r\n\r\nconst AppHeader = ( {toDo, done} ) => {\r\n    return (\r\n        <div className='d-flex app-header'>\r\n            <h1>Todo List</h1>\r\n            <h2>{toDo} more to do, {done} done</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AppHeader;","import SearchPanel from './search-panel';\r\nexport default SearchPanel;","import React, { Component } from 'react';\r\nimport './search-panel.css';\r\n\r\nexport default class SearchPanel extends Component {\r\n\r\n    state = {\r\n        term: ''\r\n    };\r\n\r\n    onSearchChange = (e) => {\r\n        const term = e.target.value;\r\n        this.setState({ term })\r\n        this.props.onSearchChange(term)\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <input type='text' className='form-control search-input' placeholder='type to search' \r\n            onChange={this.onSearchChange}\r\n            value={this.state.term}\r\n            ></input>\r\n        )\r\n    }\r\n};\r\n","import TodoListItem from './todo-list-item';\r\nexport default TodoListItem;","import React, { Component } from 'react';\r\nimport './todo-list-item.css';\r\n\r\nexport default class TodoListItem extends Component {\r\n    render(){\r\n        const { label, onDeleted, onToggleImportant, onToggleDone, \r\n            done, important\r\n        } = this.props;\r\n\r\n        let classNames = \"todo-list-item-label\";\r\n        if(done) {\r\n            classNames += ' done';\r\n        }\r\n        if (important) {\r\n            classNames += ' important';\r\n        }\r\n        \r\n        return (\r\n            <span className='todo-list-item'>\r\n                <span className={classNames} onClick={onToggleDone}>{label}</span>\r\n        \r\n                <button type=\"button\" className=\"btn btn-outline-success btn-sm float-right\"\r\n                onClick={onToggleImportant}>\r\n                    <i className=\"fa fa-exclamation\" />\r\n                </button>\r\n        \r\n                <button type=\"button\" className=\"btn btn-outline-danger btn-sm float-right\"\r\n                onClick={ onDeleted }>\r\n                    <i className=\"fa fa-trash-o\" />\r\n                </button>\r\n            </span>\r\n        )\r\n    }\r\n};","import TodoList from './todo-list';\r\nexport default TodoList;","import React from 'react';\r\nimport TodoListItem from '../todo-list-item';\r\nimport './todo-list.css';\r\n\r\nconst TodoList =( { todos, onDeleted, onToggleImportant, onToggleDone } ) => {\r\n\r\n    const elements = todos.map((item) => {\r\n\r\n        const { id, ...itemProps} = item;\r\n\r\n        if(!item.display) {\r\n\r\n        } \r\n        else {\r\n            return (\r\n                <li key={id} className=\"list-group-item\"> \r\n                    <TodoListItem { ...itemProps } onDeleted={()=>onDeleted(id)}\r\n                    onToggleImportant={()=>onToggleImportant(id)}\r\n                    onToggleDone={()=>onToggleDone(id)}\r\n                    /> \r\n                </li>\r\n            );\r\n        }\r\n\r\n\r\n    });\r\n\r\n    return (\r\n        <ul className='list-group todo-list'>\r\n            { elements }\r\n        </ul>  \r\n    );\r\n};\r\n\r\nexport default TodoList;","import ItemStatusFilter from './item-status-filter';\r\nexport default ItemStatusFilter;\r\n","import React, { Component } from 'react';\r\n\r\nimport './item-status-filter.css';\r\n\r\nexport default class ItemStatusFilter extends Component {\r\n\r\n  buttons = [\r\n    { name: 'all', label: 'All' },\r\n    { name: 'active', label: 'Active' },\r\n    { name: 'done', label: 'Done' }\r\n  ];\r\n  \r\n  render(){\r\n    const { filter, onFilterChange } = this.props;\r\n\r\n    const buttons = this.buttons.map(({name, label}) => {\r\n      const isActive = filter === name;\r\n      const clazz = isActive ? 'btn-info' : 'btn-outline-secondary';\r\n      return (\r\n        <button type=\"button\"\r\n      className={`btn ${clazz}`}\r\n      key={name}\r\n      onClick={()=>onFilterChange(name)}\r\n      >{label}</button>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div className=\"btn-group\">\r\n        {buttons}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './add-item.css';\r\n\r\nexport default class AddItem extends Component {\r\n\r\n    state = {\r\n        label: ''\r\n    }\r\n    onLabelChange = (e) => {\r\n        this.setState({\r\n            label: e.target.value\r\n        });\r\n        console.log(e.target.value)\r\n    };\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onItemAdded(this.state.label)\r\n        this.setState({\r\n            label: ''\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { onItemAdded } = this.props;\r\n        return (\r\n            <form className='item-add-form d-flex' onSubmit={this.onSubmit}>\r\n                <input type='text' className='form-control' onChange={this.onLabelChange}\r\n                placeholder='What needs to be done' value={this.state.label}/>\r\n                <button type=\"button\" className=\"btn btn-outline-success btn-add\" \r\n                onClick={this.onSubmit}\r\n                >Add</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import App from './app';\r\nexport default App;","import React, { Component } from 'react';\r\nimport AppHeader from '../app-header';\r\nimport SearchPanel from '../search-panel';\r\nimport TodoList from '../todo-list';\r\nimport './app.css';\r\nimport ItemStatusFilter from '../item-status-filter';\r\nimport AddItem from '../add-item/add-item';\r\n\r\nexport default class App extends Component {\r\n    \r\n    maxId = 100;\r\n\r\n    state = {\r\n        todoData: [\r\n            this.createTodoItem('Drink Coffee'),\r\n            this.createTodoItem('Make Awesome App'),\r\n            this.createTodoItem('Have a lunch'),\r\n        ],\r\n        term: '',\r\n        filter: 'all'\r\n    };\r\n    createTodoItem(label) {\r\n        return {\r\n            label,\r\n            important: false,\r\n            done: false,\r\n            display: true,\r\n            id: this.maxId++\r\n        }\r\n    };\r\n\r\n    deleteItem = (id) => {\r\n        this.setState(( { todoData } )=>{\r\n            const idx = todoData.findIndex( (el) => el.id === id );\r\n            const newArray = [...todoData.slice(0, idx), ...todoData.slice(idx + 1)];\r\n\r\n            return {\r\n                todoData: newArray\r\n            }\r\n        });\r\n    };\r\n\r\n    addItem = (text) => {\r\n        const newItem = this.createTodoItem(text);\r\n        this.setState(( { todoData } )=>{\r\n            const newArr = [...todoData, newItem];\r\n\r\n            return {\r\n                todoData: newArr\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    toggleProperty(arr, id, propName) {\r\n        const idx = arr.findIndex( (el) => el.id === id );\r\n        const oldItem = arr[idx];\r\n        const newItem = {...oldItem, [propName]: !oldItem[propName]};\r\n\r\n        return [\r\n            ...arr.slice(0, idx),\r\n            newItem,\r\n            ...arr.slice(idx + 1)\r\n        ];\r\n    }\r\n\r\n    onToggleImportant = (id) => {\r\n        this.setState(({ todoData }) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'important')\r\n            }\r\n        });\r\n    };\r\n\r\n    onToggleDone = (id) => {\r\n        this.setState(({ todoData }) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'done')\r\n            }\r\n        });\r\n    };\r\n\r\n    getElementForSort = (item, bool) => {\r\n        return {\r\n            label: item.label,\r\n            important: item.important,\r\n            done: item.done,\r\n            display: bool,\r\n            id: item.id\r\n        }\r\n    };\r\n    getSortElements = (arr, bool, boolIf, boolElse ) => {\r\n        return arr.map((item) => {\r\n            if(item.done === bool){\r\n                return this.getElementForSort(item, boolIf)\r\n            } else {\r\n                return this.getElementForSort(item, boolElse)\r\n            }\r\n        });\r\n    }\r\n    sortDone = () => {\r\n        this.setState(({ todoData }) => {\r\n            return {\r\n                todoData: this.getSortElements(todoData, true, true, false)\r\n            }\r\n        });\r\n    }\r\n    sortActive = () => {\r\n        this.setState(({ todoData }) => {\r\n            return {\r\n                todoData: this.getSortElements(todoData, false, true, false)\r\n            }\r\n        });\r\n    };\r\n    sortAll = () => {\r\n        this.setState(({ todoData }) => {\r\n            let arrDone = todoData.map((item) => {\r\n                return this.getElementForSort(item, true)\r\n            });\r\n            return {\r\n                todoData: arrDone\r\n            }\r\n        });\r\n    };\r\n \r\n    // моя функция поиска\r\n    search = (items, term) => {\r\n        if(term.length === 0) { return items; }\r\n\r\n        return items.filter((item)=>{\r\n            return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1\r\n        })\r\n    };\r\n    onSearchChange = (term) => {\r\n        this.setState({ term });\r\n    };\r\n    onFilterChange = (filter) => {\r\n        this.setState({ filter });\r\n    };\r\n\r\n    filter = (items, filter) => {\r\n\r\n        switch(filter) {\r\n            case 'all':\r\n                return items;\r\n            case 'active':\r\n                return items.filter((item) => !item.done)\r\n            case 'done':\r\n                return items.filter((item) => item.done)\r\n            default:\r\n                return items;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { todoData, term, filter } = this.state;\r\n\r\n        const visibleItems = this.filter(this.search(todoData, term), filter);\r\n\r\n        const doneCount = todoData\r\n                            .filter((el)=>el.done).length;\r\n        const todoCount = todoData.length - doneCount;\r\n    \r\n        return (\r\n            <div className='todo-app'>\r\n                <AppHeader toDo={todoCount} done={doneCount}/>\r\n                <div className=\"top-panel d-flex\">\r\n                    <SearchPanel todos={todoData} searchItem={this.searchItem} onSearchChange={this.onSearchChange}/>\r\n                    <ItemStatusFilter \r\n                    filter={filter} \r\n                    onFilterChange={this.onFilterChange}/>\r\n                </div>\r\n                <TodoList todos={visibleItems} onDeleted={ this.deleteItem }\r\n                onToggleImportant={this.onToggleImportant}\r\n                onToggleDone={this.onToggleDone}\r\n                />\r\n                <AddItem onItemAdded={ this.addItem }/>\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}